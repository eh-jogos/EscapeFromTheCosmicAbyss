[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeScalarInterp" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 5

[sub_resource type="VisualShaderNodeVectorScalarMix" id=4]

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "transparency"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "base_color"

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "strength"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=11]
source = 2

[sub_resource type="VisualShader" id=12]
code = "shader_type canvas_item;
uniform vec4 transparency : hint_color;
uniform vec4 base_color : hint_color;
uniform float strength;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = transparency.rgb;
	float n_out3p1 = transparency.a;

// ColorUniform:4
	vec3 n_out4p0 = base_color.rgb;
	float n_out4p1 = base_color.a;

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// VectorDecompose:5
	float n_out5p0 = n_out6p0.x;
	float n_out5p1 = n_out6p0.y;
	float n_out5p2 = n_out6p0.z;

// ScalarUniform:7
	float n_out7p0 = strength;

// ScalarOp:12
	float n_out12p0 = pow(n_out5p1, n_out7p0);

// ScalarMix:10
	float n_out10p0 = mix(n_out3p1, n_out4p1, n_out12p0);

// VectorScalarMix:2
	vec3 n_out2p0 = mix(n_out3p0, n_out4p0, n_out10p0);

// Input:8

// Texture:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out6p0.xy);
		n_out9p0 = _tex_read.rgb;
		n_out9p1 = _tex_read.a;
	}

// ScalarOp:11
	float n_out11p0 = n_out10p0 * n_out9p1;

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -401.542, 197.917 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 300 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( 340, 200 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -380, 200 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( -400, 300 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( -220, 480 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -400, 480 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -400, 400 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -460, 540 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -220, 600 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 180, 300 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 340, 420 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 0, 380 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 2, 1, 3, 0, 2, 0, 6, 0, 5, 0, 8, 0, 9, 2, 6, 0, 9, 0, 9, 1, 11, 1, 10, 0, 11, 0, 11, 0, 0, 1, 12, 0, 10, 2, 10, 0, 2, 2, 3, 1, 10, 0, 4, 1, 10, 1, 7, 0, 12, 1, 5, 1, 12, 0 )

[resource]
shader = SubResource( 12 )
shader_param/transparency = Color( 0, 0.956863, 1, 0 )
shader_param/base_color = Color( 0, 0.96, 1, 0.6 )
shader_param/strength = 1.63421
