[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
uniform_name = "color"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 2

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShader" id=5]
code = "shader_type canvas_item;
uniform vec4 color : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = color.rgb;
	float n_out2p1 = color.a;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Input:3

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out5p0.xy);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 16, 243 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 280 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 80, 280 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 80, 460 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 300, 400 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 80, 400 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 4, 2, 5, 0, 4, 0, 4, 1, 0, 1 )

[resource]
shader = SubResource( 5 )
shader_param/color = Color( 1, 1, 1, 1 )
